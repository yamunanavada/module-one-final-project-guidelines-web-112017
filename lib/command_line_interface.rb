=begin
class Session

  attr_accessor :user

<<<<<<< HEAD
  def start
    welcome_message #puts welcome
    login #finds/creates user in Users; sets as @user
    menu #shows menu - launches selected activity/ends session
  end

  def welcome_message
    puts "Hello! Welcome to [insert some cool name here] Flights!"
  end

  def login
    puts "Please enter your name: "
    user_input_name = gets.chomp.downcase
    puts "Please enter your email address: "
    user_input_email = gets.chomp.downcase
    @user = User.find_or_create_by(name: user_name, email: user_email)
  end

  def menu
    puts "What would you like to do? Please enter a number.
    1 - Search Flights
    2 - View My Trips
    3 - Inspire Me
    4 - Exit"
    answer = gets.chomp
    case answer
    when 1
      activity = Search.new(@user)
      activity.go
      menu
    when 2
      activity = ViewTrips.new(@user)
      activity.go
      menu
    when 3
      activity = InspireMe.new(@user)
      activity.go
      menu
    when 4
      puts "Thanks for visiting! Goodbye"
    end
  end

=======
def enter_email
  puts "Please enter your email address: "
  gets.chomp.downcase
end

def origin
  puts "Please enter the airport code (XXX) of your starting location: "
  answer = gets.chomp.downcase
  if answer.length != 3
    begin
      raise PartnerError
    rescue PartnerError => error
      puts error.airport_message
      origin
    end
  end
end

def destination
  puts "Please enter the airport code (XXX) of your destination: "
  answer = gets.chomp.downcase
  if answer.length != 3
    begin
      raise PartnerError
    rescue PartnerError => error
      puts error.airport_message
      destination
    end
  end
end

def date
  puts "Please enter your departure date (YYYY-MM-DD): "
  answer = gets.chomp.downcase
  if answer.split("-")[0].length !=4
    begin
      raise PartnerError
    rescue PartnerError => error
      puts error.date_message
      date
    end
  end
end

def select_flights
  #should probably split this up.
  puts "Would you like to save a flight? (Y/N)"
  answer = gets.chomp.downcase
  if answer == "y"
    puts "Please list the flight number(s) that you would like to save. If selecting multiple, please separate with a space."
    flights = gets.chomp.downcase
    flights_to_save = flights.split(" ").map{|n| n.to_i}
  elsif answer != "y" && answer != "n"
    puts "That was an incorrect response!"
    goodbye
  end
  #this method collects the flight numbers that the person would want to save - remember - here the flight numbers are actually just the list of flights in the array_of_flights generated by the parse_search_results method. To actually create trips, you will need to search the database on all of the attributes in each flight(by flight number).
end

def user_view_trips
  puts "Here are the flights that you have saved."
end

def ask_user_to_book_flight
  puts "Would you like to book a flight? Y/N"
  answer = gets.chomp.downcase

  if answer == "y"
    puts "Please list the number of the flight you would like to book. Please list just one flight."
    flight = gets.chomp.to_i
  elsif answer != "y"
    flight = 0
  end

end



class PartnerError < StandardError
  def date_message
    "You did not enter the date in the correct format (YYYY-MM-DD). Please re-enter the date of departure."
  end

  def airport_message
    "You did not enter the correct format of the desired airport (XXX). Please re-enter the airport code."
  end
>>>>>>> a04bd75fd6025214ac0a20c989d82a3fdb99ed28
end
=end
